import groovy.json.*

pipeline {
  agent any

  options {
    ansiColor("xterm")
    skipStagesAfterUnstable()
  }
  environment {
    GCR_REPO = "asia.gcr.io/prj-gke-asia-northeast3-3e7d/hola-backend"
    ENV = "${env.GIT_BRANCH}"
    ENV_PROD_HOLA = "production" 
    ENV_DEV_HOLA = "local"
  }


  stages {
    stage("Build") {
      when {
        anyOf {
          expression { triggeredByGCPJenkins() }
          expression { triggeredByPR() }
        }
      }
      steps {
        script {
          println "Building the dev image"
          addUserToGroup()
          docker.withRegistry('https://asia.gcr.io', 'gcr:prj-gke-asia-northeast3'){
             dockerBuild("${ENV_DEV_HOLA}","${env.GIT_COMMIT}")
          }
        }
      }
    }
    stage("Stage Push") {
      when {
        anyOf {
          expression { triggeredByGCPJenkins() }
          expression { triggeredByPR() }
        }
      }
      steps {
        script {
          println "Pushing dev Image to GCR"
          docker.withRegistry('https://asia.gcr.io', 'gcr:prj-gke-asia-northeast3'){
          dockerPush("${env.GIT_COMMIT}")
        }
        }
      }
    }
    stage("Stage Deploy dev") {
      when {
        anyOf {
          expression { triggeredByGCPJenkins() }
          expression { triggeredByPR() }
        }
      }
      steps {
        script {
          println "Deploy new version to K8S"
          gcloudKubeconfig()
          helmUpgrade("${env.GIT_BRANCH}","${env.GIT_COMMIT}")
        }
      }
    }
    stage("Stage Deploy Prod") {
      when {
        anyOf {
          expression { triggeredByMaster() }
        }
      }
      steps {
        script {
          println "Building the Prod image"
          addUserToGroup()
          docker.withRegistry('https://asia.gcr.io', 'gcr:prj-gke-asia-northeast3'){
          dockerBuild("${ENV_PROD_HOLA}","${env.GIT_COMMIT}-prod")
          }
        }
        script {
          println "Pushing Prod Image to GCR"
          docker.withRegistry('https://asia.gcr.io', 'gcr:prj-gke-asia-northeast3'){
          dockerPush("${env.GIT_COMMIT}-prod")
        }
        }
      }
    }
    stage('Cleanup') {
      steps {
        cleanWs()
      }
    }
  }
}

// return true if job is trigger by GitHub push to Master branch
Boolean triggeredByGCPJenkins() {
  return (env.GIT_BRANCH == "dev")
}
// return true if job is trigger by GitHub push to Master branch
Boolean triggeredByMaster() {
  return (env.GIT_BRANCH == "master")
}
// return true if job is trigger by GitHub push to feature branch which has a PR
Boolean triggeredByPR() {
  return (env.CHANGE_ID ? true : false)
}
 void addUserToGroup() {
    try {
      sh("sudo usermod -aG docker devops")
      sh("sudo chmod 666 /var/run/docker.sock")
      sh("gcloud auth configure-docker asia.gcr.io")
    } catch(ex) {
      error("addUserToGroup(): failed to build docker image.\nDetails: ${ex.getMessage()}")
    }
  }
  void dockerBuild(String env,String tag) {
    if ("${env}" == "local"){
      //sh("rm .env .env.production .env.development")
      //sh("cat .env.${env}")
      try {
      sh("sudo docker build -t $GCR_REPO:${tag} .")
    } catch(ex) {
      error("dockerBuild(): failed to build docker image.\nDetails: ${ex.getMessage()}")
    }
    }
    else if ("${env}" == "production"){
      //sh("rm .env .env.local .env.development")
      //sh("cat .env.${env}")
      try {
      sh("sudo docker build -t $GCR_REPO:${tag} .")
      } catch(ex) {
      error("dockerBuild(): failed to build docker image.\nDetails: ${ex.getMessage()}")
    }
    }
    //writeFile(file: ".env.${env_received}", text: data)
    // sh("cat .env.${env_received}")
    // try {
    //   sh("sudo docker build -t $GCR_REPO:${tag} .")
    // } catch(ex) {
    //   error("dockerBuild(): failed to build docker image.\nDetails: ${ex.getMessage()}")
    // }
  }
  void dockerPush(String tag) {
    try {
      sh("sudo docker push $GCR_REPO:${tag}")
    } catch(ex) {
      error("dockerBuild(): failed to push docker image.\nDetails: ${ex.getMessage()}")
    }
  }
void helmUpgrade(String namespace,String tag) {
  String nameSpace = namespace
    try {
      sh("helm upgrade --install hola-backend -f helm/values-${getNamespace("${nameSpace}")}.yaml --set image.tag=${tag} -n ${getNamespace("${nameSpace}")} helm/")
    } catch(ex) {
      error("helmUpgrade(): failed to build docker image.\nDetails: ${ex.getMessage()}")
    }
  }
void gcloudKubeconfig() {
    try {
      sh("gcloud container clusters get-credentials gke-asia-northeast3-shared --region asia-northeast3 --project prj-gke-asia-northeast3-3e7d --internal-ip")
    } catch(ex) {
      error("gcloudKubeconfig(): failed toget kubernetes credentials.\nDetails: ${ex.getMessage()}")
    }
  }
String getNamespace(String namespace) {
  if (!namespace) {
    error("getNamespace(): no argument passed.")
  }

  Map namespaces = [:]
  namespaces["dev"] = "hola-dev"
  namespaces["master"] = "hola-prod"

  String namespaceName = namespaces.get(namespace)
  if (!namespaceName) {
    namespaceName = "Unknown"
  }
  return namespaceName
}

